// Generated by CoffeeScript 1.9.3
var _, register, reset, restore, sandbox, sinon, spy, stub,
  slice = [].slice;

sinon = require("sinon");

_ = require("underscore");

sandbox = [];

register = function() {
  var args, e, item, method, obj, type;
  type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  item = null;
  try {
    item = sinon[type].apply(sinon, args);
    sandbox.push(item);
  } catch (_error) {
    e = _error;
    if (/already wrapped/i.test(e.message)) {
      obj = args[0];
      method = args[1];
      item = obj[method];
    } else {
      throw e;
    }
  }
  return item;
};

stub = function(obj, method, func) {
  return register('stub', obj, method, func);
};

spy = function(obj, method) {
  return register('spy', obj, method);
};

reset = function() {
  return _.each(sandbox, function(stub_or_spy) {
    return stub_or_spy.reset();
  });
};

restore = function() {
  return _.each(sandbox, function(stub) {
    if (stub.restore) {
      return stub.restore();
    }
  });
};

module.exports = {
  stub: stub,
  spy: spy,
  reset: reset,
  restore: restore
};
