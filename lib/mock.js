// Generated by CoffeeScript 1.12.4
var _, register, reset, restore, sandbox, sinon, spy, stub;

sinon = require("sinon");

_ = require("lodash");

sandbox = [];

register = function(type, obj, method, func) {
  var e, item;
  item = null;
  try {
    if (type === "stub" && !_.isEmpty(func)) {
      item = sinon.stub(obj, method).callsFake(func);
    } else {
      item = sinon[type].apply(sinon, [obj, method, func]);
    }
    sandbox.push(item);
  } catch (error) {
    e = error;
    if (/already wrapped/i.test(e.message)) {
      item = obj[method];
    } else {
      throw e;
    }
  }
  return item;
};

stub = function(obj, method, func) {
  return register('stub', obj, method, func);
};

spy = function(obj, method) {
  return register('spy', obj, method);
};

reset = function() {
  return _.each(sandbox, function(stub_or_spy) {
    return stub_or_spy.reset();
  });
};

restore = function() {
  return _.each(sandbox, function(stub) {
    if (stub.restore) {
      return stub.restore();
    }
  });
};

module.exports = {
  stub: stub,
  spy: spy,
  reset: reset,
  restore: restore
};
